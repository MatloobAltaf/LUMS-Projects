# -*- coding: utf-8 -*-
"""Gender_Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vn6CYXViTgwjaS2ON_sVhOVm-88a8nJZ

## Imports
"""

!pip install python_speech_features

import python_speech_features as mfcc
from scipy.io.wavfile import read
import numpy as np
import pandas as pd
import os
import time

from matplotlib import pyplot as plt
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

from google.colab import drive
drive.mount('/content/drive')

"""## Dataset"""

!unzip "/content/drive/MyDrive/Colab Notebooks/ML-Project/LUMS_FALL2020_PROJECT_DATA.zip"

"""## Data Reading Function"""

def get_MFCC(audio, sr):
    features = mfcc.mfcc(audio, sr, 0.025, 0.01, 13, appendEnergy = True)
    return np.mean(features, axis=0)

def dataset_SR(path):
  speaker=os.listdir(path)
  output=np.array([]);
  for a,s in enumerate(speaker):
    speaker_id=s
    # print(speaker_id)
    path_to_speaker=os.path.join(path,speaker_id)
    speaker_wav_files=os.listdir(path_to_speaker)
    for b,wav_files in enumerate(speaker_wav_files):
      wav_path=os.path.join(path_to_speaker,wav_files)
      sr, audio = read(wav_path)
      features = get_MFCC(audio, sr)
      # print(speaker_id)
      features=np.append(features,speaker_id)
      features=np.reshape(features,(1,features.shape[0]))
      if a==0 and b==0:
        # first iteration
        output= features
        continue
      output=np.append(output,features,axis=0)
  return output

def dataset_GR(path):
  speaker=os.listdir(path)
  output=np.array([]);
  for a,s in enumerate(speaker):
    speaker_id=s
    # print(speaker_id)
    path_to_speaker=os.path.join(path,speaker_id)
    speaker_wav_files=os.listdir(path_to_speaker)
    for b,wav_files in enumerate(speaker_wav_files):
      wav_path=os.path.join(path_to_speaker,wav_files)
      sr, audio = read(wav_path)
      features = get_MFCC(audio, sr)
      features=np.append(features,speaker_id[-1])
      features=np.reshape(features,(1,features.shape[0]))
      if a==0 and b==0:
        # first iteration
        output= features
        continue
      output=np.append(output,features,axis=0)
  return output

"""## Preprocession Functions"""

def normalize(array):
  means=np.mean(array, axis=0)
  std=np.std(array, axis=0)
  array=(array-means)/std
  return array

def preprocessing(df_train, df_valid, df_test):
  # merge train and validation data
  df_train = pd.concat([df_train, df_valid])
  # seperate out labels
  Y_train=df_train[13]
  Y_test=df_test[13]
  # seperate out features
  X_train=df_train.drop(columns=[13])
  X_test=df_test.drop(columns=[13])
  # convert to numeric
  X_train = X_train.apply(pd.to_numeric)
  X_test = X_test.apply(pd.to_numeric)
  # normalize
  normalised_train=normalize(X_train)
  normalised_test=normalize(X_test)

  return normalised_train, Y_train, normalised_test, Y_test

"""## Printing"""

def printing(pred, true):
       
        print("Accuracy: ",accuracy_score(pred,true))
        
        print("Classification report: ")
        print(classification_report(pred, true))

        print("Confusion matrix: ")
        print(confusion_matrix(pred,true))

"""## Import Models"""

from sklearn.model_selection import GridSearchCV
from sklearn.svm import LinearSVC
from sklearn.neural_network import MLPClassifier
from sklearn.naive_bayes import GaussianNB

"""## Multi Layer Perceptron"""

def mlp(X_train, Y_train, X_test, Y_test):
  parameters = {'random_state':[1],
                'activation':['logistic'],
                'solver':['sgd'],
                'max_iter':[5000],
                'learning_rate_init':[0.4,0.1,0.01],
                'hidden_layer_sizes':[(128,64),(64,),(64,32),(32,)],}

  MLP = MLPClassifier()
  #girdi search
  GSC = GridSearchCV(MLP, param_grid=parameters,scoring='f1_macro',cv=3,n_jobs=-1)
  #fitting 
  GSC.fit(X_train,Y_train)
  #getting predictions
  pred = GSC.predict(X_test)
  #pritnting 
  printing(pred, Y_test)

"""## Linear Support Vector"""

def lsv(X_train, Y_train, X_test, Y_test, epochs):
  LS = LinearSVC(random_state=0, verbose=1, max_iter=epochs,dual=False)
  #fitting
  LS.fit(X_train,Y_train)
  #getting prediction
  pred = LS.predict(X_test)
  #printing
  printing(pred, Y_test)

"""## Gaussian Naive Bayes"""

def gnb(X_train, Y_train, X_test, Y_test):
  GNB = GaussianNB()
  #fitting
  GNB.fit(X_train,Y_train)
  #getting predictions
  pred = GNB.predict(X_test)
  #pritnting
  printing(pred, Y_test)

"""# Speaker Recognition"""

train_directory = '/content/Speaker_Recognition/Train'
validation_directory = '/content/Speaker_Recognition/Valid'
test_directory = '/content/Speaker_Recognition/Test'

start = time.time()
df_train=dataset_SR(train_directory)
df_test=dataset_SR(test_directory)
df_valid=dataset_SR(validation_directory)
end = time.time()
print("Time taken: ", end-start)

df_train=pd.DataFrame(df_train)
df_test=pd.DataFrame(df_test)
df_valid=pd.DataFrame(df_valid)

X_train, Y_train, X_test, Y_test = preprocessing(df_train, df_valid, df_test)
X_train[:5]

"""## Multi Layer Perceptron"""

mlp(X_train, Y_train, X_test, Y_test)

"""### Result


*   Accuracy  96 %
*   F1 Score  96 %

## Linear Support Vector
"""

lsv(X_train, Y_train, X_test, Y_test, 2000)

"""### Result

*   Accuracy  94 %
*   F1 Score  93 %

## Gaussian Naive Bayes
"""

gnb(X_train, Y_train, X_test, Y_test)

"""### Result


*   Accuracy  93 %
*   F1 Score  92 %

# Gender Recognition
"""

train_directory = '/content/Gender_Recognition/Train'
validation_directory = '/content/Gender_Recognition/Valid'
test_directory = '/content/Gender_Recognition/Test'

start = time.time()
df_train=dataset_GR(train_directory)
df_test=dataset_GR(test_directory)
df_valid=dataset_GR(validation_directory)
end = time.time()
print("Time taken: ", end-start)

df_train=pd.DataFrame(df_train)
df_test=pd.DataFrame(df_test)
df_valid=pd.DataFrame(df_valid)

X_train, Y_train, X_test, Y_test = preprocessing(df_train, df_valid, df_test)
X_train[:5]

"""## Multilayer Perceptron"""

mlp(X_train, Y_train, X_test, Y_test)

"""### Result

*   Accuracy  86 %
*   F1 Score  80 %

Linear Support Vector
"""

lsv(X_train, Y_train, X_test, Y_test, 2000)

"""### Result
*   Accuracy  82 %
*   F1 Score  74 %

Gaussian Naive Bayes
"""

gnb(X_train, Y_train, X_test, Y_test)

"""### Result
*   Accuracy  85 %
*   F1 Score  79 %
"""

